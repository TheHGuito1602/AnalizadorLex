/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package compiladoresproyecto;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author eljug
 */
public class Interfaz extends javax.swing.JFrame {

    /**
     * Creates new form Interfaz
     */
    CompiladoresProyecto cp = new CompiladoresProyecto();
    DefaultTableModel mdlTabla;
    Vector VCabecera = new Vector();
    private String _ESP_ = "â˜…";

    public Interfaz() {
        initComponents();
        VCabecera.addElement("Token");
        VCabecera.addElement("Componente Lexico");
        VCabecera.addElement("Lexema 1");
        VCabecera.addElement("Lexema 2");
        mdlTabla = new DefaultTableModel(VCabecera, 0);
        tblNmenicos.setModel(mdlTabla);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btmBuscar = new javax.swing.JButton();
        btmTxt = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblNmenicos = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtaPalabras = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtaArchivo = new javax.swing.JTextArea();
        btmAnalizar1 = new javax.swing.JButton();
        btmGenerar1 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtaSalida = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btmBuscar.setText("Cargar Archivo.txt");
        btmBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btmBuscarActionPerformed(evt);
            }
        });

        btmTxt.setText("Crear Archivo.txt");
        btmTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btmTxtActionPerformed(evt);
            }
        });

        tblNmenicos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblNmenicos);

        txtaPalabras.setColumns(20);
        txtaPalabras.setRows(5);
        jScrollPane2.setViewportView(txtaPalabras);

        txtaArchivo.setColumns(20);
        txtaArchivo.setRows(5);
        jScrollPane3.setViewportView(txtaArchivo);

        btmAnalizar1.setText("Analizar");
        btmAnalizar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btmAnalizar1ActionPerformed(evt);
            }
        });

        btmGenerar1.setText("Generar Tabla");
        btmGenerar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btmGenerar1ActionPerformed(evt);
            }
        });

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        txtaSalida.setColumns(20);
        txtaSalida.setRows(5);
        jScrollPane4.setViewportView(txtaSalida);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btmBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btmAnalizar1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btmTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btmGenerar1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                    .addComponent(jScrollPane4))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btmTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(btmGenerar1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btmBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btmAnalizar1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btmBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btmBuscarActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.showOpenDialog(null);
        File archivo = fc.getSelectedFile();
        try {
            FileReader fr = new FileReader(archivo);
            BufferedReader br = new BufferedReader(fr);
            String texto = "";
            String linea = "";
            while ((linea = br.readLine()) != null) {
                texto += linea + "\n";
            }
            txtaArchivo.setText(texto);
            JOptionPane.showMessageDialog(null, "Archivo leido correctamente");
        } catch (Exception e) {

        }
    }//GEN-LAST:event_btmBuscarActionPerformed

    private void btmTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btmTxtActionPerformed
        JFileChooser guardar = new JFileChooser();
        guardar.setApproveButtonText("Guardar");
        guardar.showSaveDialog(null);
        File archivo = new File(guardar.getSelectedFile() + ".txt");
        try {
            BufferedWriter salida = new BufferedWriter(new FileWriter(archivo));
            salida.write(txtaPalabras.getText());
            salida.close();
        } catch (Exception e) {

        }

    }//GEN-LAST:event_btmTxtActionPerformed

    private void btmAnalizar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btmAnalizar1ActionPerformed
        File archivo = new File("archivo.txt");
        PrintWriter escribir;
        try {
            escribir = new PrintWriter(archivo);
            escribir.print(txtaArchivo.getText());
            escribir.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            Reader lector = new BufferedReader(new FileReader("archivo.txt"));
            Lexer lexer = new Lexer(lector);
            String resultado = "";

            while (true) {
                Tokens tokens = lexer.yylex();
                if (tokens == null) {
                    resultado += "FIN";
                    txtaPalabras.setText(resultado);
                    return;
                }
                switch (tokens) {
                    case ERROR:
                        resultado += "SImbolo no definido\n";
                        break;
                    case ID:
                        resultado += lexer.lexeme + _ESP_ + tokens + _ESP_ + tokens + _ESP_ + lexer.lexeme + "\n";
                        break;
                    case NUM:
                        resultado += lexer.lexeme + _ESP_ + tokens + _ESP_ + tokens + _ESP_ + lexer.lexeme + "\n";
                        break;
                    case PALRE:
                        resultado += lexer.lexeme + _ESP_ + tokens + _ESP_ + lexer.lexeme + _ESP_ + "-" + "\n";
                        break;
                    case OPASI:
                        //resultado += lexer.lexeme + " "+ tokens +"\n";
                        resultado += this.generarTxt2(lexer.lexeme, tokens.toString());
                        break;
                    case OPARI:
                        //resultado += lexer.lexeme + " "+ tokens +"\n";
                        resultado += this.generarTxt2(lexer.lexeme, tokens.toString());
                        break;
                    case OPIND:
                        //resultado += lexer.lexeme + " "+ tokens +"\n";
                        resultado += this.generarTxt2(lexer.lexeme, tokens.toString());
                        break;
                    case OPREL:
                        //resultado += lexer.lexeme + " "+ tokens +"\n";
                        resultado += this.generarTxt2(lexer.lexeme, tokens.toString());
                        break;
                    case OPLOG:
                        //resultado += lexer.lexeme + " "+ tokens +"\n";
                        resultado += this.generarTxt2(lexer.lexeme, tokens.toString());
                        break;
                    case OPESP:
                        //resultado += lexer.lexeme + " "+ tokens +"\n";
                        resultado += this.generarTxt2(lexer.lexeme, tokens.toString());
                        break;
                    case CDNA:
                        resultado += lexer.lexeme + _ESP_ + tokens + _ESP_ + tokens + _ESP_ + lexer.lexeme + "\n";
                        break;
                    default:
                        resultado += lexer.lexeme + _ESP_ + tokens + "\n";
                        break;
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btmAnalizar1ActionPerformed

    private void btmGenerar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btmGenerar1ActionPerformed
        tblNmenicos.setModel(cp.listaLexema());
        String txtF = "";
        try {
            for (int i = 0; i < tblNmenicos.getRowCount(); i++) {
                if (tblNmenicos.getValueAt(i, 2) != null) {
                    //System.out.println(tblNmenicos.getValueAt(i, 2));

                    if (tblNmenicos.getValueAt(i, 2).toString().equals("DEL")
                            || tblNmenicos.getValueAt(i, 2).toString().equals("LLI")
                            || tblNmenicos.getValueAt(i, 2).toString().equals("LLD")) {
                        txtF = txtF + tblNmenicos.getValueAt(i, 2) + "\n";
                    } else {
                        txtF = txtF + tblNmenicos.getValueAt(i, 2) + " ";
                    }
                }
                txtaSalida.setText(txtF);

            }
            JFileChooser guardar = new JFileChooser();
            guardar.setApproveButtonText("Guardar");
            guardar.showSaveDialog(null);
            File archivo = new File(guardar.getSelectedFile() + ".txt");
            try {
                BufferedWriter salida = new BufferedWriter(new FileWriter(archivo));
                salida.write(txtaSalida.getText());
                salida.close();
            } catch (Exception e) {

            }
        } catch (Exception e) {
            System.out.println();
        }

    }//GEN-LAST:event_btmGenerar1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    public String generarTxt2(String lexer, String token) {
        String cadena = "";
        switch (token) {
            case "OPASI":
                switch (lexer) {
                    case "=":
                        cadena = lexer + _ESP_ + token + _ESP_ + "ASI" + _ESP_ + "-" + "\n";
                        break;
                    case "*=":
                        cadena = lexer + _ESP_ + token + _ESP_ + "MULA" + _ESP_ + "-" + "\n";
                        break;
                    case "/=":
                        cadena = lexer + _ESP_ + token + _ESP_ + "DIVA" + _ESP_ + "-" + "\n";
                        break;
                    case "%=":
                        cadena = lexer + _ESP_ + token + _ESP_ + "MODA" + _ESP_ + "-" + "\n";
                        break;
                    case "+=":
                        cadena = lexer + _ESP_ + token + _ESP_ + "SUA" + _ESP_ + "-" + "\n";
                        break;
                    case "-=":
                        cadena = lexer + _ESP_ + token + _ESP_ + "REA" + _ESP_ + "-" + "\n";
                        break;
                }
                break;
            case "OPARI":
                switch (lexer) {
                    case "+":
                        cadena = lexer + _ESP_ + token + _ESP_ + "SUM" + _ESP_ + "-" + "\n";
                        break;
                    case "-":
                        cadena = lexer + _ESP_ + token + _ESP_ + "RES" + _ESP_ + "-" + "\n";
                        break;
                    case "*":
                        cadena = lexer + _ESP_ + token + _ESP_ + "MUL" + _ESP_ + "-" + "\n";
                        break;
                    case "/":
                        cadena = lexer + _ESP_ + token + _ESP_ + "DIV" + _ESP_ + "-" + "\n";
                        break;
                    case "%":
                        cadena = lexer + _ESP_ + token + _ESP_ + "MOD" + _ESP_ + "-" + "\n";
                        break;
                }
                break;
            case "OPIND":
                switch (lexer) {
                    case "++":
                        cadena = lexer + _ESP_ + token + _ESP_ + "INC" + _ESP_ + "-" + "\n";
                        break;
                    case "--":
                        cadena = lexer + _ESP_ + token + _ESP_ + "DEC" + _ESP_ + "-" + "\n";
                        break;
                }
                break;
            case "OPREL":
                switch (lexer) {
                    case "==":
                        cadena = lexer + _ESP_ + token + _ESP_ + "IGU" + _ESP_ + "-" + "\n";
                        break;
                    case "!=":
                        cadena = lexer + _ESP_ + token + _ESP_ + "DIF" + _ESP_ + "-" + "\n";
                        break;
                    case ">":
                        cadena = lexer + _ESP_ + token + _ESP_ + "MAY" + _ESP_ + "-" + "\n";
                        break;
                    case "<":
                        cadena = lexer + _ESP_ + token + _ESP_ + "MEN" + _ESP_ + "-" + "\n";
                        break;
                    case ">=":
                        cadena = lexer + _ESP_ + token + _ESP_ + "MAI" + _ESP_ + "-" + "\n";
                        break;
                    case "<=":
                        cadena = lexer + _ESP_ + token + _ESP_ + "MEI" + _ESP_ + "-" + "\n";
                        break;
                }
                break;
            case "OPLOG":
                switch (lexer) {
                    case "!":
                        cadena = lexer + _ESP_ + token + _ESP_ + "NOL" + _ESP_ + "-" + "\n";
                        break;
                    case "^":
                        cadena = lexer + _ESP_ + token + _ESP_ + "ORX" + _ESP_ + "-" + "\n";
                        break;
                    case "&&":
                        cadena = lexer + _ESP_ + token + _ESP_ + "ANDL" + _ESP_ + "-" + "\n";
                        break;
                    case "||":
                        cadena = lexer + _ESP_ + token + _ESP_ + "ORL" + _ESP_ + "-" + "\n";
                        break;
                }
                break;
            case "OPESP":
                switch (lexer) {
                    case "[":
                        cadena = lexer + _ESP_ + token + _ESP_ + "COI" + _ESP_ + "-" + "\n";
                        break;
                    case "]":
                        cadena = lexer + _ESP_ + token + _ESP_ + "COD" + _ESP_ + "-" + "\n";
                        break;
                    case ".":
                        cadena = lexer + _ESP_ + token + _ESP_ + "PUN" + _ESP_ + "-" + "\n";
                        break;
                    case "?":
                        cadena = lexer + _ESP_ + token + _ESP_ + "OCO" + _ESP_ + "-" + "\n";
                        break;
                    case ",":
                        cadena = lexer + _ESP_ + token + _ESP_ + "COM" + _ESP_ + "-" + "\n";
                        break;
                    case "//":
                        cadena = lexer + _ESP_ + token + _ESP_ + "COC" + _ESP_ + "-" + "\n";
                        break;
                    case "/*":
                        cadena = lexer + _ESP_ + token + _ESP_ + "ICO" + _ESP_ + "-" + "\n";
                        break;
                    case "*/":
                        cadena = lexer + _ESP_ + token + _ESP_ + "FCO" + _ESP_ + "-" + "\n";
                        break;
                    case ":":
                        cadena = lexer + _ESP_ + token + _ESP_ + "DPU" + _ESP_ + "-" + "\n";
                        break;
                    case ";":
                        cadena = lexer + _ESP_ + token + _ESP_ + "DEL" + _ESP_ + "-" + "\n";
                        break;
                    case "(":
                        cadena = lexer + _ESP_ + token + _ESP_ + "PIZ" + _ESP_ + "-" + "\n";
                        break;
                    case ")":
                        cadena = lexer + _ESP_ + token + _ESP_ + "PDE" + _ESP_ + "-" + "\n";
                        break;
                    case "{":
                        cadena = lexer + _ESP_ + token + _ESP_ + "LLI" + _ESP_ + "-" + "\n";
                        break;
                    case "}":
                        cadena = lexer + _ESP_ + token + _ESP_ + "LLD" + _ESP_ + "-" + "\n";
                        break;
                }
                break;
        }
        return cadena;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btmAnalizar1;
    private javax.swing.JButton btmBuscar;
    private javax.swing.JButton btmGenerar1;
    private javax.swing.JButton btmTxt;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable tblNmenicos;
    private javax.swing.JTextArea txtaArchivo;
    private javax.swing.JTextArea txtaPalabras;
    private javax.swing.JTextArea txtaSalida;
    // End of variables declaration//GEN-END:variables
}
